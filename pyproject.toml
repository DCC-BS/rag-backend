[project]
name = "rag"
dynamic = ["version"]
description = "RAG Bot fÃ¼r den Kanton Basel Stadt"
readme = "README.md"
license = "MIT"
license-files = ["LICEN[CS]E*"]
requires-python = ">=3.12,<4.0"
dependencies = [
    "docling>=2.15.0",
    "lancedb>=0.17.0",
    "langchain-community>=0.3.14",
    "langchain-openai>=0.2.14",
    "langchain>=0.3.14",
    "omegaconf>=2.3.0",
    "rich>=13.9.4",
    "bentoml>=1.3.19",
    "asyncio>=3.4.3",
    "ninja>=1.11.1.2",
    "transformers>=4.47.0",
    "langgraph>=0.2.63",
    "fastapi[standard]>=0.115.8",
    "structlog>=25.1.0",
    "version-pioneer>=0.0.13",
    "python-jose[cryptography]>=3.4.0",
    "cachetools>=5.5.2",
    "psycopg[binary]>=3.2.9",
    "cohere>=5.15.0",
    "sqlalchemy>=2.0.41",
    "pgvector>=0.4.1",
    "alembic>=1.16.2",
    "watchdog>=6.0.0",
    "boto3>=1.38.44",
]

[project.scripts]
rag-upload-s3 = "rag.cli.upload_to_s3:main"

[project.urls]
Homepage = "https://DCC-BS.github.io/rag-application/"
Repository = "https://github.com/DCC-BS/rag-application"
Documentation = "https://DCC-BS.github.io/rag-application/"

[dependency-groups]
dev = [
    "coverage>=7.6.12",
    "pytest>=8.3.4",
    "pre-commit>=2.20.0",
    "tox-uv>=1.11.3",
    "deptry>=0.22.0",
    "basedpyright>=1.27.1",
    "pytest-cov>=6.0.0",
    "ruff>=0.9.2",
    "mkdocs>=1.4.2",
    "mkdocs-material>=8.5.10",
    "mkdocstrings[python]>=0.26.1",
    "rich>=13.9.4",
    "pytest-asyncio>=0.26.0",
]

[project.optional-dependencies]
compile = ["flash-attn==2.8.0.post2"]

[tool.uv]
no-build-isolation-package = ["flash-attn"]

[[tool.uv.dependency-metadata]]
name = "flash-attn"
version = "2.7.2.post1"
requires-dist = ["torch", "einops", "setuptools"]

[tool.uv.sources]
torch = [
  { index = "pytorch-cu124", marker = "platform_system != 'Darwin'"},
]
torchvision = [
    { index = "pytorch-cpu", marker = "platform_system == 'Darwin'" },
]

[[tool.uv.index]]
name = "pytorch-cu124"
url = "https://download.pytorch.org/whl/cu124"
explicit = true
[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

[build-system]
requires = ["hatchling","version-pioneer>=0.0.13"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "version-pioneer"

[tool.version-pioneer]
versionscript = "src/rag/_version.py"  # Where to "read" the Version-Pioneer script (to execute `get_version_dict()`).
versionfile-sdist = "src/rag/_version.py"  # Where to "write" the version dict for sdist.
versionfile-wheel = "src/rag/_version.py"  # Where to "write" the version dict for wheel.

[tool.basedpyright]
include = [
    "src"
]
exclude = [
    "**/__pycache__",
    "**/.venv",
    "**/.*"
]
defineConstant = { DEBUG = true }
pythonVersion = "3.12"
stubPath = "src/rag/stubs"
reportExplicitAny = false

[tool.pytest.ini_options]
testpaths = ["tests"]
markers = [
    "asyncio: mark a test as an asyncio coroutine test"
]
asyncio_default_fixture_loop_scope = "function"

[tool.ruff]
target-version = "py312"
line-length = 120
fix = true
exclude = ["**/stubs/**"]

[tool.ruff.lint]
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
ignore = [
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731",
    "TRY003",
    "S603"
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "A002"]

[tool.ruff.format]
preview = true
indent-style = "space"
quote-style = "double"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
# Group imports by type (standard library, third-party, first-party).
combine-as-imports = true
force-wrap-aliases = true

[tool.coverage.run]
branch = true
source = [ "src" ]

[tool.coverage.report]
omit = [
    "*/tests/*",
    "*/.venv/*"
]
skip_empty = true
exclude_lines = [
    "raise NotImplementedError",
    "raise NotImplemented",
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:"
]
exclude_also = [
    "@(abc\\. )?abstractmethod",
    "@(abc\\. )?abstractproperty"
]
